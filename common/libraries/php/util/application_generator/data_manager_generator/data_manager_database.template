<?php

namespace {NAMESPACE};

use common\libraries\EqualityCondition;
use common\libraries\Database;

/**
 * @package {L_APPLICATION_NAME}.datamanager
 */

/**
 *	This is a data manager that uses a database for storage. It was written
 *	for MySQL, but should be compatible with most SQL flavors.
 *
 *  @author Sven Vanpoucke
 *  @author {AUTHOR}
 */

class Database{APPLICATION_NAME}DataManager extends Database implements {APPLICATION_NAME}DataManagerInterface
{

    function initialize()
    {
    	parent :: initialize();
	$this->database->set_prefix('{L_APPLICATION_NAME}_');
    }

    <!-- BEGIN OBJECTS -->
    function get_next_{OBJECTS.L_OBJECT_CLASS}_id()
    {
        return $this->database->get_next_id({OBJECTS.OBJECT_CLASS} :: get_table_name());
    }

    function create_{OBJECTS.L_OBJECT_CLASS}(${OBJECTS.L_OBJECT_CLASS})
    {
        return $this->database->create(${OBJECTS.L_OBJECT_CLASS});
    }

    function update_{OBJECTS.L_OBJECT_CLASS}(${OBJECTS.L_OBJECT_CLASS})
    {
        $condition = new EqualityCondition({OBJECTS.OBJECT_CLASS} :: PROPERTY_ID, ${OBJECTS.L_OBJECT_CLASS}->get_id());
        return $this->database->update(${OBJECTS.L_OBJECT_CLASS}, $condition);
    }

    function delete_{OBJECTS.L_OBJECT_CLASS}(${OBJECTS.L_OBJECT_CLASS})
    {
        $condition = new EqualityCondition({OBJECTS.OBJECT_CLASS} :: PROPERTY_ID, ${OBJECTS.L_OBJECT_CLASS}->get_id());
        return $this->database->delete(${OBJECTS.L_OBJECT_CLASS}->get_table_name(), $condition);
    }

    function count_{OBJECTS.L_OBJECT_CLASSES}($condition = null)
    {
        return $this->database->count_objects({OBJECTS.OBJECT_CLASS} :: get_table_name(), $condition);
    }

    function retrieve_{OBJECTS.L_OBJECT_CLASS}($id)
    {
        $condition = new EqualityCondition({OBJECTS.OBJECT_CLASS} :: PROPERTY_ID, $id);
        return $this->database->retrieve_object({OBJECTS.OBJECT_CLASS} :: get_table_name(), $condition);
    }

    function retrieve_{OBJECTS.L_OBJECT_CLASSES}($condition = null, $offset = null, $max_objects = null, $order_by = null)
    {
        return $this->database->retrieve_objects({OBJECTS.OBJECT_CLASS} :: get_table_name(), $condition, $offset, $max_objects, $order_by);
    }
    <!-- END OBJECTS -->
}
?>